searchState.loadedDescShard("rust_cuda", 0, "Assertion in GPU kernel for one expression is true.\nAssertion in GPU kernel for two expressions are equal.\nAssertion in GPU kernel for two expressions are not equal.\nAlternative of <code>std::print!</code> using CUDA <code>vprintf</code> system-call\nAlternative of <code>std::println!</code> using CUDA <code>vprintf</code> system-call\nSafety\nSafety\nSafety\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nDimension specified in kernel launching\nIndices that the kernel code is running on\nMemory allocator using CUDA malloc/free\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors\nErrors\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLends an immutable copy of <code>&amp;self</code> to CUDA:\nLends a mutable copy of <code>&amp;mut self</code> to CUDA:\nMoves <code>self</code> to CUDA iff <code>self</code> is <code>SafeDeviceCopy</code>\nErrors\nSafety\nSafety\nErrors\nErrors\nErrors\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen the <code>host</code> feature is <strong>not</strong> set, <code>CudaExchangeBuffer</code> …\nWhen the <code>host</code> feature is set, <code>CudaExchangeBuffer</code> refers to …\nWhen the <code>host</code> feature is <strong>not</strong> set, <code>CudaExchangeBuffer</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nErrors\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors\nErrors\nErrors")