searchState.loadedDescShard("rust_cuda", 0, "CI Status MSRV Rust Doc License Status Code Coverage Gitpod\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory allocator using CUDA malloc/free\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDimension specified in kernel launching\nIndices that the kernel code is running on\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbort the CUDA kernel using the <code>trap</code> system call.\nExit the CUDA kernel using the <code>exit</code> instruction.\nHelper function to efficiently pretty-print an error …\nHelper function to efficiently pretty-print a …\nThe <code>print()</code> function takes an <code>Arguments</code> struct and formats …\nPrints to the CUDA kernel’s standard output using the …\nPrints to the CUDA kernel’s standard output using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new uniquely branded <code>Stream</code>, which can bind async …\nErrors\nErrors\nErrors\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides the <code>#[kernel]</code> attribute macro. When applied to a …\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nProvides the <code>#[derive(LendRustToCuda)</code> derive macro for the …\nSafety\nSafety\nLends an immutable borrow of <code>&amp;self</code> to CUDA:\nLends an immutable copy of <code>&amp;self</code> to CUDA:\nLends a mutable borrow of <code>&amp;mut self</code> to CUDA iff <code>Self</code> is …\nLends a mutable borrow of <code>&amp;mut self</code> to CUDA iff <code>Self</code> is …\nMoves <code>self</code> to CUDA iff <code>Self</code> is <code>StackOnly</code>.\nMoves <code>self</code> to CUDA iff <code>self</code> is <code>StackOnly</code>.\nSafety\nSafety\nSafety\nTypes whose in-memory bit representation on the CPU host …\nTypes for which mutable references can be safely shared …\nTypes which contain no pointers or references and can thus …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the data asynchronously back to the host CPU device.\nMoves the asynchronous data move to a different <code>Stream</code>.\nWraps a still-pending <code>value</code> which is being computed on …\nWraps a <code>value</code> which is ready on <code>stream</code>.\nSynchronises on this computation to block until it has …\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nErrors\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the data synchronously to the CUDA device, where it …\nMoves the data asynchronously to the CUDA device.\nMoves the data synchronously back to the host CPU device.\nMoves the data asynchronously back to the host CPU device.\nErrors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")